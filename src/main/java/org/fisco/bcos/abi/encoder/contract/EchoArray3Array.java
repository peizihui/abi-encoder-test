package org.fisco.bcos.abi.encoder.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.BcosFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class EchoArray3Array extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_GETUINT = "getUint";

    public static final String FUNC_GETBOOL = "getBool";

    public static final String FUNC_GETBS = "getBS";

    public static final String FUNC_GETINT = "getInt";

    public static final String FUNC_SET = "set";

    public static final String FUNC_GET = "get";

    public static final String FUNC_SETBS32 = "setBS32";

    public static final String FUNC_GETBS32 = "getBS32";

    public static final String FUNC_GETSTRING = "getString";

    public static final String FUNC_SETBS = "setBS";

    public static final String FUNC_GETADDR = "getAddr";

    public static final String FUNC_SETINT = "setInt";

    public static final String FUNC_SETADDR = "setAddr";

    public static final String FUNC_SETBOOL = "setBool";

    public static final String FUNC_SETUINT = "setUint";

    public static final String FUNC_SETSTRING = "setString";

    public static final Event EVENTUINT_EVENT = new Event("EventUint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Uint256>>>() {}));
    ;

    public static final Event EVENTINT_EVENT = new Event("EventInt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Int256>>>() {}));
    ;

    public static final Event EVENTBOOL_EVENT = new Event("EventBool", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Bool>>>() {}));
    ;

    public static final Event EVENTADDR_EVENT = new Event("EventAddr", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Address>>>() {}));
    ;

    public static final Event EVENTB32_EVENT = new Event("EventB32", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Bytes32>>>() {}));
    ;

    public static final Event EVENTSTRING_EVENT = new Event("EventString", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Utf8String>>>() {}));
    ;

    public static final Event EVENTBS_EVENT = new Event("EventBS", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<DynamicBytes>>>() {}));
    ;

    public static final Event EVENT_EVENT = new Event("Event", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Uint256>>>() {}, new TypeReference<DynamicArray<StaticArray3<Int256>>>() {}, new TypeReference<DynamicArray<StaticArray3<Bool>>>() {}, new TypeReference<DynamicArray<StaticArray3<Address>>>() {}, new TypeReference<DynamicArray<StaticArray3<Bytes32>>>() {}, new TypeReference<DynamicArray<StaticArray3<Utf8String>>>() {}, new TypeReference<DynamicArray<StaticArray3<DynamicBytes>>>() {}));
    ;

    @Deprecated
    protected EchoArray3Array(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected EchoArray3Array(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected EchoArray3Array(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected EchoArray3Array(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<List> getUint() {
        final Function function = new Function(FUNC_GETUINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Uint256>>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getBool() {
        final Function function = new Function(FUNC_GETBOOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Bool>>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getBS() {
        final Function function = new Function(FUNC_GETBS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<DynamicBytes>>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getInt() {
        final Function function = new Function(FUNC_GETINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Int256>>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> set(List<List<BigInteger>> _u, List<List<BigInteger>> _i, List<List<Boolean>> _b, List<List<String>> _addr, List<List<byte[]>> _bs32, List<List<String>> _s, List<List<byte[]>> _bs) {
        final Function function = new Function(
                FUNC_SET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_u, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_i, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Int256.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_b, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Bool.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_addr, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Address.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_bs32, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_s, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_bs, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void set(List<List<BigInteger>> _u, List<List<BigInteger>> _i, List<List<Boolean>> _b, List<List<String>> _addr, List<List<byte[]>> _bs32, List<List<String>> _s, List<List<byte[]>> _bs, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_u, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_i, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Int256.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_b, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Bool.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_addr, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Address.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_bs32, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_s, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Utf8String.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_bs, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple7<List<List<BigInteger>>, List<List<BigInteger>>, List<List<Boolean>>, List<List<String>>, List<List<byte[]>>, List<List<String>>, List<List<byte[]>>>> get() {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Uint256>>>() {}, new TypeReference<DynamicArray<StaticArray3<Int256>>>() {}, new TypeReference<DynamicArray<StaticArray3<Bool>>>() {}, new TypeReference<DynamicArray<StaticArray3<Address>>>() {}, new TypeReference<DynamicArray<StaticArray3<Bytes32>>>() {}, new TypeReference<DynamicArray<StaticArray3<Utf8String>>>() {}, new TypeReference<DynamicArray<StaticArray3<DynamicBytes>>>() {}));
        return new RemoteCall<Tuple7<List<List<BigInteger>>, List<List<BigInteger>>, List<List<Boolean>>, List<List<String>>, List<List<byte[]>>, List<List<String>>, List<List<byte[]>>>>(
                new Callable<Tuple7<List<List<BigInteger>>, List<List<BigInteger>>, List<List<Boolean>>, List<List<String>>, List<List<byte[]>>, List<List<String>>, List<List<byte[]>>>>() {
                    @Override
                    public Tuple7<List<List<BigInteger>>, List<List<BigInteger>>, List<List<Boolean>>, List<List<String>>, List<List<byte[]>>, List<List<String>>, List<List<byte[]>>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<List<List<BigInteger>>, List<List<BigInteger>>, List<List<Boolean>>, List<List<String>>, List<List<byte[]>>, List<List<String>>, List<List<byte[]>>>(
                                convertToNative((List<StaticArray3<Uint256>>) results.get(0).getValue()), 
                                convertToNative((List<StaticArray3<Int256>>) results.get(1).getValue()), 
                                convertToNative((List<StaticArray3<Bool>>) results.get(2).getValue()), 
                                convertToNative((List<StaticArray3<Address>>) results.get(3).getValue()), 
                                convertToNative((List<StaticArray3<Bytes32>>) results.get(4).getValue()), 
                                convertToNative((List<StaticArray3<Utf8String>>) results.get(5).getValue()), 
                                convertToNative((List<StaticArray3<DynamicBytes>>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setBS32(List<List<byte[]>> _b) {
        final Function function = new Function(
                FUNC_SETBS32, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_b, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setBS32(List<List<byte[]>> _b, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETBS32, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_b, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<List> getBS32() {
        final Function function = new Function(FUNC_GETBS32, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Bytes32>>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getString() {
        final Function function = new Function(FUNC_GETSTRING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Utf8String>>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setBS(List<List<byte[]>> _b) {
        final Function function = new Function(
                FUNC_SETBS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_b, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setBS(List<List<byte[]>> _b, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETBS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_b, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<List> getAddr() {
        final Function function = new Function(FUNC_GETADDR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray3<Address>>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setInt(List<List<BigInteger>> _i) {
        final Function function = new Function(
                FUNC_SETINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_i, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Int256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setInt(List<List<BigInteger>> _i, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_i, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Int256.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> setAddr(List<List<String>> _addr) {
        final Function function = new Function(
                FUNC_SETADDR, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_addr, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setAddr(List<List<String>> _addr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETADDR, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_addr, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> setBool(List<List<Boolean>> _b) {
        final Function function = new Function(
                FUNC_SETBOOL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_b, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Bool.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setBool(List<List<Boolean>> _b, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETBOOL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_b, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Bool.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> setUint(List<List<BigInteger>> _u) {
        final Function function = new Function(
                FUNC_SETUINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_u, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setUint(List<List<BigInteger>> _u, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETUINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_u, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> setString(List<List<String>> _s) {
        final Function function = new Function(
                FUNC_SETSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_s, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setString(List<List<String>> _s, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicArray(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_s, org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3.class, org.fisco.bcos.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public List<EventUintEventResponse> getEventUintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTUINT_EVENT, transactionReceipt);
        ArrayList<EventUintEventResponse> responses = new ArrayList<EventUintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventUintEventResponse typedResponse = new EventUintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.u = (List<List<BigInteger>>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventUintEventResponse> eventUintEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, EventUintEventResponse>() {
            @Override
            public EventUintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENTUINT_EVENT, log);
                EventUintEventResponse typedResponse = new EventUintEventResponse();
                typedResponse.log = log;
                typedResponse.u = (List<List<BigInteger>>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventUintEventResponse> eventUintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENTUINT_EVENT));
        return eventUintEventFlowable(filter);
    }

    public List<EventIntEventResponse> getEventIntEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTINT_EVENT, transactionReceipt);
        ArrayList<EventIntEventResponse> responses = new ArrayList<EventIntEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventIntEventResponse typedResponse = new EventIntEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.i = (List<List<BigInteger>>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventIntEventResponse> eventIntEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, EventIntEventResponse>() {
            @Override
            public EventIntEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENTINT_EVENT, log);
                EventIntEventResponse typedResponse = new EventIntEventResponse();
                typedResponse.log = log;
                typedResponse.i = (List<List<BigInteger>>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventIntEventResponse> eventIntEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENTINT_EVENT));
        return eventIntEventFlowable(filter);
    }

    public List<EventBoolEventResponse> getEventBoolEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTBOOL_EVENT, transactionReceipt);
        ArrayList<EventBoolEventResponse> responses = new ArrayList<EventBoolEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventBoolEventResponse typedResponse = new EventBoolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.b = (List<List<Boolean>>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventBoolEventResponse> eventBoolEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, EventBoolEventResponse>() {
            @Override
            public EventBoolEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENTBOOL_EVENT, log);
                EventBoolEventResponse typedResponse = new EventBoolEventResponse();
                typedResponse.log = log;
                typedResponse.b = (List<List<Boolean>>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventBoolEventResponse> eventBoolEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENTBOOL_EVENT));
        return eventBoolEventFlowable(filter);
    }

    public List<EventAddrEventResponse> getEventAddrEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTADDR_EVENT, transactionReceipt);
        ArrayList<EventAddrEventResponse> responses = new ArrayList<EventAddrEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventAddrEventResponse typedResponse = new EventAddrEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (List<List<String>>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventAddrEventResponse> eventAddrEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, EventAddrEventResponse>() {
            @Override
            public EventAddrEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENTADDR_EVENT, log);
                EventAddrEventResponse typedResponse = new EventAddrEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (List<List<String>>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventAddrEventResponse> eventAddrEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENTADDR_EVENT));
        return eventAddrEventFlowable(filter);
    }

    public List<EventB32EventResponse> getEventB32Events(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTB32_EVENT, transactionReceipt);
        ArrayList<EventB32EventResponse> responses = new ArrayList<EventB32EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventB32EventResponse typedResponse = new EventB32EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.b = (List<List<byte[]>>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventB32EventResponse> eventB32EventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, EventB32EventResponse>() {
            @Override
            public EventB32EventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENTB32_EVENT, log);
                EventB32EventResponse typedResponse = new EventB32EventResponse();
                typedResponse.log = log;
                typedResponse.b = (List<List<byte[]>>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventB32EventResponse> eventB32EventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENTB32_EVENT));
        return eventB32EventFlowable(filter);
    }

    public List<EventStringEventResponse> getEventStringEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTSTRING_EVENT, transactionReceipt);
        ArrayList<EventStringEventResponse> responses = new ArrayList<EventStringEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventStringEventResponse typedResponse = new EventStringEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.s = (List<List<String>>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventStringEventResponse> eventStringEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, EventStringEventResponse>() {
            @Override
            public EventStringEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENTSTRING_EVENT, log);
                EventStringEventResponse typedResponse = new EventStringEventResponse();
                typedResponse.log = log;
                typedResponse.s = (List<List<String>>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventStringEventResponse> eventStringEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENTSTRING_EVENT));
        return eventStringEventFlowable(filter);
    }

    public List<EventBSEventResponse> getEventBSEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTBS_EVENT, transactionReceipt);
        ArrayList<EventBSEventResponse> responses = new ArrayList<EventBSEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventBSEventResponse typedResponse = new EventBSEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.b = (List<List<byte[]>>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventBSEventResponse> eventBSEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, EventBSEventResponse>() {
            @Override
            public EventBSEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENTBS_EVENT, log);
                EventBSEventResponse typedResponse = new EventBSEventResponse();
                typedResponse.log = log;
                typedResponse.b = (List<List<byte[]>>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventBSEventResponse> eventBSEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENTBS_EVENT));
        return eventBSEventFlowable(filter);
    }

    public List<EventEventResponse> getEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENT_EVENT, transactionReceipt);
        ArrayList<EventEventResponse> responses = new ArrayList<EventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventEventResponse typedResponse = new EventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._u = (List<List<BigInteger>>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._i = (List<List<BigInteger>>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._b = (List<List<Boolean>>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._addr = (List<List<String>>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._bs32 = (List<List<byte[]>>) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._s = (List<List<String>>) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._bs = (List<List<byte[]>>) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventEventResponse> eventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, EventEventResponse>() {
            @Override
            public EventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENT_EVENT, log);
                EventEventResponse typedResponse = new EventEventResponse();
                typedResponse.log = log;
                typedResponse._u = (List<List<BigInteger>>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._i = (List<List<BigInteger>>) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._b = (List<List<Boolean>>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._addr = (List<List<String>>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._bs32 = (List<List<byte[]>>) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse._s = (List<List<String>>) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse._bs = (List<List<byte[]>>) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventEventResponse> eventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENT_EVENT));
        return eventEventFlowable(filter);
    }

    @Deprecated
    public static EchoArray3Array load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new EchoArray3Array(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static EchoArray3Array load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new EchoArray3Array(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static EchoArray3Array load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new EchoArray3Array(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static EchoArray3Array load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new EchoArray3Array(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<EchoArray3Array> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EchoArray3Array.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EchoArray3Array> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EchoArray3Array.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<EchoArray3Array> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EchoArray3Array.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EchoArray3Array> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EchoArray3Array.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class EventUintEventResponse {
        public Log log;

        public List<List<BigInteger>> u;
    }

    public static class EventIntEventResponse {
        public Log log;

        public List<List<BigInteger>> i;
    }

    public static class EventBoolEventResponse {
        public Log log;

        public List<List<Boolean>> b;
    }

    public static class EventAddrEventResponse {
        public Log log;

        public List<List<String>> addr;
    }

    public static class EventB32EventResponse {
        public Log log;

        public List<List<byte[]>> b;
    }

    public static class EventStringEventResponse {
        public Log log;

        public List<List<String>> s;
    }

    public static class EventBSEventResponse {
        public Log log;

        public List<List<byte[]>> b;
    }

    public static class EventEventResponse {
        public Log log;

        public List<List<BigInteger>> _u;

        public List<List<BigInteger>> _i;

        public List<List<Boolean>> _b;

        public List<List<String>> _addr;

        public List<List<byte[]>> _bs32;

        public List<List<String>> _s;

        public List<List<byte[]>> _bs;
    }
}
